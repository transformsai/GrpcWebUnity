// This file was automatically generated by JsLibGenerator.cs
mergeInto(LibraryManager.library,{
  GetGlobalObject: function (returnTypeId, name){
    try{
      name = Pointer_stringify(name);
      var context = Module['UnityJsInteropInstance'];
      var ret = context.GetGlobalObject(name);;
      setValue(returnTypeId, ret.type, 'i32');
      return ret.value;
    }
    catch (error){
      setValue(returnTypeId, -1, 'i32');
      try{
        console.log(error)
        var errString = String(error)
        var strRet = Module['UnityJsInteropInstance'].CreateString(errString);
        return strRet.value;
      }
      catch (innerError){
        return 0;
      }
    }
  }
  ,
  CreateEmptyObject: function (returnTypeId){
    try{
      var context = Module['UnityJsInteropInstance'];
      var ret = context.CreateEmptyObject();;
      setValue(returnTypeId, ret.type, 'i32');
      return ret.value;
    }
    catch (error){
      setValue(returnTypeId, -1, 'i32');
      try{
        console.log(error)
        var errString = String(error)
        var strRet = Module['UnityJsInteropInstance'].CreateString(errString);
        return strRet.value;
      }
      catch (innerError){
        return 0;
      }
    }
  }
  ,
  CreateString: function (returnTypeId, str){
    try{
      str = Pointer_stringify(str);
      var context = Module['UnityJsInteropInstance'];
      var ret = context.CreateString(str);;
      setValue(returnTypeId, ret.type, 'i32');
      return ret.value;
    }
    catch (error){
      setValue(returnTypeId, -1, 'i32');
      try{
        console.log(error)
        var errString = String(error)
        var strRet = Module['UnityJsInteropInstance'].CreateString(errString);
        return strRet.value;
      }
      catch (innerError){
        return 0;
      }
    }
  }
  ,
  CreateArray: function (returnTypeId){
    try{
      var context = Module['UnityJsInteropInstance'];
      var ret = context.CreateArray();;
      setValue(returnTypeId, ret.type, 'i32');
      return ret.value;
    }
    catch (error){
      setValue(returnTypeId, -1, 'i32');
      try{
        console.log(error)
        var errString = String(error)
        var strRet = Module['UnityJsInteropInstance'].CreateString(errString);
        return strRet.value;
      }
      catch (innerError){
        return 0;
      }
    }
  }
  ,
  CallSlow: function (returnTypeId, functionRef, paramArrayRef){
    try{
      var context = Module['UnityJsInteropInstance'];
      var ret = context.CallSlow(functionRef, paramArrayRef);;
      setValue(returnTypeId, ret.type, 'i32');
      return ret.value;
    }
    catch (error){
      setValue(returnTypeId, -1, 'i32');
      try{
        console.log(error)
        var errString = String(error)
        var strRet = Module['UnityJsInteropInstance'].CreateString(errString);
        return strRet.value;
      }
      catch (innerError){
        return 0;
      }
    }
  }
  ,
  Call: function (returnTypeId, functionRef, paramValue1, paramTypeId1, paramValue2, paramTypeId2, paramValue3, paramTypeId3){
    try{
      var context = Module['UnityJsInteropInstance'];
      var ret = context.Call(functionRef, paramValue1, paramTypeId1, paramValue2, paramTypeId2, paramValue3, paramTypeId3);;
      setValue(returnTypeId, ret.type, 'i32');
      return ret.value;
    }
    catch (error){
      setValue(returnTypeId, -1, 'i32');
      try{
        console.log(error)
        var errString = String(error)
        var strRet = Module['UnityJsInteropInstance'].CreateString(errString);
        return strRet.value;
      }
      catch (innerError){
        return 0;
      }
    }
  }
  ,
  InvokeSlow: function (returnTypeId, targetRef, targetType, fnName, paramArrayRef){
    try{
      fnName = Pointer_stringify(fnName);
      var context = Module['UnityJsInteropInstance'];
      var ret = context.InvokeSlow(targetRef, targetType, fnName, paramArrayRef);;
      setValue(returnTypeId, ret.type, 'i32');
      return ret.value;
    }
    catch (error){
      setValue(returnTypeId, -1, 'i32');
      try{
        console.log(error)
        var errString = String(error)
        var strRet = Module['UnityJsInteropInstance'].CreateString(errString);
        return strRet.value;
      }
      catch (innerError){
        return 0;
      }
    }
  }
  ,
  Invoke: function (returnTypeId, targetRef, targetType, fnName, paramValue1, paramTypeId1, paramValue2, paramTypeId2, paramValue3, paramTypeId3){
    try{
      fnName = Pointer_stringify(fnName);
      var context = Module['UnityJsInteropInstance'];
      var ret = context.Invoke(targetRef, targetType, fnName, paramValue1, paramTypeId1, paramValue2, paramTypeId2, paramValue3, paramTypeId3);;
      setValue(returnTypeId, ret.type, 'i32');
      return ret.value;
    }
    catch (error){
      setValue(returnTypeId, -1, 'i32');
      try{
        console.log(error)
        var errString = String(error)
        var strRet = Module['UnityJsInteropInstance'].CreateString(errString);
        return strRet.value;
      }
      catch (innerError){
        return 0;
      }
    }
  }
  ,
  ConstructSlow: function (returnTypeId, functionRef, paramArrayRef){
    try{
      var context = Module['UnityJsInteropInstance'];
      var ret = context.ConstructSlow(functionRef, paramArrayRef);;
      setValue(returnTypeId, ret.type, 'i32');
      return ret.value;
    }
    catch (error){
      setValue(returnTypeId, -1, 'i32');
      try{
        console.log(error)
        var errString = String(error)
        var strRet = Module['UnityJsInteropInstance'].CreateString(errString);
        return strRet.value;
      }
      catch (innerError){
        return 0;
      }
    }
  }
  ,
  Construct: function (returnTypeId, functionRef, paramValue1, paramTypeId1, paramValue2, paramTypeId2, paramValue3, paramTypeId3){
    try{
      var context = Module['UnityJsInteropInstance'];
      var ret = context.Construct(functionRef, paramValue1, paramTypeId1, paramValue2, paramTypeId2, paramValue3, paramTypeId3);;
      setValue(returnTypeId, ret.type, 'i32');
      return ret.value;
    }
    catch (error){
      setValue(returnTypeId, -1, 'i32');
      try{
        console.log(error)
        var errString = String(error)
        var strRet = Module['UnityJsInteropInstance'].CreateString(errString);
        return strRet.value;
      }
      catch (innerError){
        return 0;
      }
    }
  }
  ,
  GetProp: function (returnTypeId, objectRef, propNameValue, propNameTypeId){
    try{
      var context = Module['UnityJsInteropInstance'];
      var ret = context.GetProp(objectRef, propNameValue, propNameTypeId);;
      setValue(returnTypeId, ret.type, 'i32');
      return ret.value;
    }
    catch (error){
      setValue(returnTypeId, -1, 'i32');
      try{
        console.log(error)
        var errString = String(error)
        var strRet = Module['UnityJsInteropInstance'].CreateString(errString);
        return strRet.value;
      }
      catch (innerError){
        return 0;
      }
    }
  }
  ,
  SetProp: function (returnTypeId, objectRef, propNameValue, propNameTypeId, value, valueTypeId){
    try{
      var context = Module['UnityJsInteropInstance'];
      var ret = context.SetProp(objectRef, propNameValue, propNameTypeId, value, valueTypeId);;
      setValue(returnTypeId, ret.type, 'i32');
      return ret.value;
    }
    catch (error){
      setValue(returnTypeId, -1, 'i32');
      try{
        console.log(error)
        var errString = String(error)
        var strRet = Module['UnityJsInteropInstance'].CreateString(errString);
        return strRet.value;
      }
      catch (innerError){
        return 0;
      }
    }
  }
  ,
  GetArrayElement: function (returnTypeId, arrayRef, index){
    try{
      var context = Module['UnityJsInteropInstance'];
      var ret = context.GetArrayElement(arrayRef, index);;
      setValue(returnTypeId, ret.type, 'i32');
      return ret.value;
    }
    catch (error){
      setValue(returnTypeId, -1, 'i32');
      try{
        console.log(error)
        var errString = String(error)
        var strRet = Module['UnityJsInteropInstance'].CreateString(errString);
        return strRet.value;
      }
      catch (innerError){
        return 0;
      }
    }
  }
  ,
  SetArrayElement: function (returnTypeId, arrayRef, index, value, valueTypeId){
    try{
      var context = Module['UnityJsInteropInstance'];
      var ret = context.SetArrayElement(arrayRef, index, value, valueTypeId);;
      setValue(returnTypeId, ret.type, 'i32');
      return ret.value;
    }
    catch (error){
      setValue(returnTypeId, -1, 'i32');
      try{
        console.log(error)
        var errString = String(error)
        var strRet = Module['UnityJsInteropInstance'].CreateString(errString);
        return strRet.value;
      }
      catch (innerError){
        return 0;
      }
    }
  }
  ,
  CreateCallback: function (returnTypeId, paramArrayRef){
    try{
      var context = Module['UnityJsInteropInstance'];
      var ret = context.CreateCallback(paramArrayRef);;
      setValue(returnTypeId, ret.type, 'i32');
      return ret.value;
    }
    catch (error){
      setValue(returnTypeId, -1, 'i32');
      try{
        console.log(error)
        var errString = String(error)
        var strRet = Module['UnityJsInteropInstance'].CreateString(errString);
        return strRet.value;
      }
      catch (innerError){
        return 0;
      }
    }
  }
  ,
  CreateSharedTypedArray: function (returnTypeId, arrayPtr, typeCode, arrayLength){
    try{
      var context = Module['UnityJsInteropInstance'];
      var ret = context.CreateSharedTypedArray(arrayPtr, typeCode, arrayLength);;
      setValue(returnTypeId, ret.type, 'i32');
      return ret.value;
    }
    catch (error){
      setValue(returnTypeId, -1, 'i32');
      try{
        console.log(error)
        var errString = String(error)
        var strRet = Module['UnityJsInteropInstance'].CreateString(errString);
        return strRet.value;
      }
      catch (innerError){
        return 0;
      }
    }
  }
  ,
  CreateTypedArray: function (returnTypeId, arrayPtr, typeCode, arrayLength){
    try{
      var context = Module['UnityJsInteropInstance'];
      var ret = context.CreateTypedArray(arrayPtr, typeCode, arrayLength);;
      setValue(returnTypeId, ret.type, 'i32');
      return ret.value;
    }
    catch (error){
      setValue(returnTypeId, -1, 'i32');
      try{
        console.log(error)
        var errString = String(error)
        var strRet = Module['UnityJsInteropInstance'].CreateString(errString);
        return strRet.value;
      }
      catch (innerError){
        return 0;
      }
    }
  }
  ,
  GarbageCollect: function (returnTypeId, value, typeId){
    try{
      var context = Module['UnityJsInteropInstance'];
      var ret = context.GarbageCollect(value, typeId);;
      setValue(returnTypeId, ret.type, 'i32');
      return ret.value;
    }
    catch (error){
      setValue(returnTypeId, -1, 'i32');
      try{
        console.log(error)
        var errString = String(error)
        var strRet = Module['UnityJsInteropInstance'].CreateString(errString);
        return strRet.value;
      }
      catch (innerError){
        return 0;
      }
    }
  }
  ,
  Equals: function (returnTypeId, lhsValue, lhsType, rhsValue, rhsType){
    try{
      var context = Module['UnityJsInteropInstance'];
      var ret = context.Equals(lhsValue, lhsType, rhsValue, rhsType);;
      setValue(returnTypeId, ret.type, 'i32');
      return ret.value;
    }
    catch (error){
      setValue(returnTypeId, -1, 'i32');
      try{
        console.log(error)
        var errString = String(error)
        var strRet = Module['UnityJsInteropInstance'].CreateString(errString);
        return strRet.value;
      }
      catch (innerError){
        return 0;
      }
    }
  }
  ,
  GetNumber: function (returnTypeId, value, typeId){
    try{
      var context = Module['UnityJsInteropInstance'];
      var ret = context.GetNumber(value, typeId);;
      setValue(returnTypeId, ret.type, 'i32');
      return ret.value;
    }
    catch (error){
      setValue(returnTypeId, -1, 'i32');
      try{
        console.log(error)
        var errString = String(error)
        var strRet = Module['UnityJsInteropInstance'].CreateString(errString);
        return strRet.value;
      }
      catch (innerError){
        return 0;
      }
    }
  }
  ,
  GetString: function (returnTypeId, value, typeId){
    try{
      var context = Module['UnityJsInteropInstance'];
      var ret = context.GetString(value, typeId);;
      setValue(returnTypeId, ret.type, 'i32');
      var returnStr  = ret.value;
      var bufferSize = lengthBytesUTF8(returnStr) + 1;
      var strBuffer = _malloc(bufferSize);
      stringToUTF8(returnStr, strBuffer, bufferSize);
      return strBuffer;
    }
    catch (error){
      setValue(returnTypeId, -1, 'i32');
      try{
        console.log(error)
        var errString = String(error)
        var strRet = Module['UnityJsInteropInstance'].CreateString(errString);
        return strRet.value;
      }
      catch (innerError){
        return 0;
      }
    }
  }
  ,
  RespondToCallback: function (returnTypeId, responseRefId, value, typeId){
    try{
      var context = Module['UnityJsInteropInstance'];
      var ret = context.RespondToCallback(responseRefId, value, typeId);;
      setValue(returnTypeId, ret.type, 'i32');
      return ret.value;
    }
    catch (error){
      setValue(returnTypeId, -1, 'i32');
      try{
        console.log(error)
        var errString = String(error)
        var strRet = Module['UnityJsInteropInstance'].CreateString(errString);
        return strRet.value;
      }
      catch (innerError){
        return 0;
      }
    }
  }
  ,
  InitializeInternal: function (callbackHandler, onAcquireReference, onReleaseReference){
    var arrayBuilder = function(pointer, typeCode, length){
      switch (typeCode){
        case 5: return new Int8Array(buffer, pointer, length);
        case 6: return new Uint8Array(buffer, pointer, length);
        case 7: return new Int16Array(buffer, pointer, length);
        case 8: return new Uint16Array(buffer, pointer, length);
        case 9: return new Int32Array(buffer, pointer, length);
        case 10: return new Uint32Array(buffer, pointer, length);
        case 13: return new Float32Array(buffer, pointer, length);
        case 14: return new Float64Array(buffer, pointer, length);
        case 15: return new Uint8ClampedArray(buffer, pointer, length);
      }
    }
    var ch = function(callbackRefId, responseRefId, value, typeId, paramsAreArray){return Runtime.dynCall('vdddii', callbackHandler, [callbackRefId, responseRefId, value, typeId, paramsAreArray]);};
    var oac = function(refId){return Runtime.dynCall('id', onAcquireReference, [refId]);};
    var orc = function(refId){return Runtime.dynCall('id', onReleaseReference, [refId]);};
    var ctr = Module['UnityJsInterop'];
    Module['UnityJsInteropInstance'] = new ctr(arrayBuilder, ch, oac, orc);
  }
  ,
}
);
